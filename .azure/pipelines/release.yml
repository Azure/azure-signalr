name: $(Date:yyyyMMdd).$(Rev:r)
variables:
  - name: BuildConfiguration
    value: Release
  - name: buildcounter
    value: $(rev:.r)
  - name: BuildNumber
    value: $[counter('buildcounter', 11128)]
  - name: Codeql.Enabled
    value: true
  - name: IsTargetMultiFramework
    value: true
  - name: LocalFeed
    value: $(UserProfile)\localfeed
  - name: MSBuildProperties
    value: Configuration=$(BuildConfiguration);BuildNumber=$(BuildNumber);VersionSuffix=$(VersionSuffix);IsTargetMultiFramework=$(IsTargetMultiFramework);SignType=$(SignType)
  - name: SignType
    value: real
  - name: TeamName
    value: Azure SignalR Team
  - name: VersionSuffix
    value: preview1-$(BuildNumber)
parameters:
  - name: IsFinalBuild
    type: boolean
    default: false
  - name: releaseEmulator
    type: boolean
    default: false
  - name: releaseSDKCore
    type: boolean
    default: false
  - name: releaseServerlessProtocol
    type: boolean
    default: false
resources:
  repositories:
    - repository: self
      type: git
      ref: refs/heads/dev
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release
trigger:
  branches:
    include:
      - dev
  paths:
    include:
      - src
  batch: true
extends:
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1esPipelines
  parameters:
    pool:
      os: windows
      name: MSEngSS-MicroBuild2022-1ES
    customBuildTags:
      - MigrationTooling-mseng-VSJava-8484-Tool
    sdl:
      eslint:
        enabled: false
    stages:
      - stage: Stage
        jobs:
          - job: Phase_1
            displayName: Phase 1
            cancelTimeoutInMinutes: 1
            templateContext:
              outputs:
                - output: pipelineArtifact
                  artifactName: Artifact
                  targetPath: artifacts
                  displayName: Publish nupkg to VSTS
                - output: nuget
                  displayName: Push packages to azure-signalr-dev feed
                  nuGetFeedType: external
                  packagesToPush: artifacts/**/*.nupkg;artifacts/**/*.snupkg
                  packageParentPath: artifacts
                  publishFeedCredentials: azure-signalr-dev
            steps:
              - checkout: self
                clean: true
                submodules: true
                fetchDepth: 1
                fetchTags: false
                persistCredentials: true
              - ${{ if eq(parameters.IsFinalBuild, true) }}:
                - bash: |
                    echo "##vso[task.setvariable variable=VersionSuffix]rtm"
                    echo $(VersionSuffix) # outputs VersionSuffix
                  displayName: Set VersionSuffix to rtm if it is final build
              - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@3
                displayName: Install Signing Plugin
                condition: and(succeeded(), in(variables.SignType, 'real', 'test'))Â 
                inputs:
                  signType: $(SignType)
                  zipSources: false
                  feedSource: https://pkgs.dev.azure.com/mseng/_packaging/MicroBuildToolset/nuget/v3/index.json
              - task: UseDotNet@2
                displayName: Add 6.x
                inputs:
                  version: 6.x
                  performMultiLevelLookup: true
              - task: UseDotNet@2
                displayName: Add 7.x
                inputs:
                  version: 7.x
                  performMultiLevelLookup: true
              - ${{ if or( eq(parameters.IsFinalBuild, false),  eq(parameters.releaseSDKCore, true)) }}:
                - task: DotNetCoreCLI@2
                  displayName: dotnet build AzureSignalR.sln
                  inputs:
                    projects: AzureSignalR.sln
                    arguments: /p:$(MSBuildProperties)
                - task: DotNetCoreCLI@2
                  displayName: dotnet test
                  inputs:
                    command: test
                    arguments: /p:$(MSBuildProperties)
                - task: DotNetCoreCLI@2
                  displayName: dotnet pack SDK Core
                  inputs:
                    command: pack
                    searchPatternPack: src/Microsoft*/*.csproj;!src\Microsoft.Azure.SignalR.Emulator\Microsoft.Azure.SignalR.Emulator.csproj;!src\Microsoft.Azure.SignalR.Serverless.Protocols\Microsoft.Azure.SignalR.Serverless.Protocols.csproj
                    outputDir: artifacts
                    includesymbols: true
                    buildProperties: $(MSBuildProperties);SymbolPackageFormat=snupkg
                    verbosityPack: Normal
              - ${{ if or( eq(parameters.IsFinalBuild, false),  eq(parameters.releaseEmulator, true)) }}:
                - task: DotNetCoreCLI@2
                  displayName: dotnet pack emulator when only dev or release emulator
                  inputs:
                    command: pack
                    searchPatternPack: src/Microsoft.Azure.SignalR.Emulator/Microsoft.Azure.SignalR.Emulator.csproj
                    outputDir: artifacts
                    includesymbols: true
                    buildProperties: $(MSBuildProperties);SymbolPackageFormat=snupkg
                    verbosityPack: Normal
              - ${{ if or( eq(parameters.IsFinalBuild, false),  eq(parameters.releaseServerlessProtocol, true)) }}:
                - task: DotNetCoreCLI@2
                  displayName: "dotnet pack serverless protocol when only dev or release "
                  inputs:
                    command: pack
                    searchPatternPack: src/Microsoft.Azure.SignalR.Serverless.Protocols/Microsoft.Azure.SignalR.Serverless.Protocols.csproj
                    outputDir: artifacts
                    includesymbols: true
                    buildProperties: $(MSBuildProperties);SymbolPackageFormat=snupkg
                    verbosityPack: Normal
              - task: CmdLine@2
                displayName: Clean Local Feed
                inputs:
                  script: if exist $(LocalFeed)\ del /s /q $(LocalFeed)
              - task: NuGetCommand@2
                displayName: Initialize Local Feed
                inputs:
                  command: custom
                  arguments: init artifacts $(LocalFeed)
              - task: MSBuild@1
                displayName: Test Restoring Packages
                inputs:
                  solution: build/package-test.3.proj
                  msbuildArchitecture: x64
                  msbuildArguments: /p:$(MSBuildProperties) /p:UseLocalFeed=true /p:LocalFeed=$(LocalFeed) /t:Restore
              - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
                displayName: "Manifest Generator "
                inputs:
                  BuildDropPath: artifacts
              - ${{ if eq(parameters.IsFinalBuild, true) }}:
                - task: AzureFileCopy@4
                  displayName: SDK Partner Release AzCopy
                  inputs:
                    SourcePath: artifacts/*
                    ConnectedServiceNameARM: azuresdkpartnerdrops
                    Destination: AzureBlob
                    StorageAccountRM: azuresdkpartnerdrops
                    ContainerName: drops
                    BlobPrefix: azure-signalr/dotnet/$(BuildNumber)
