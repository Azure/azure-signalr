{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../node_modules/es6-promise/dist/lib/es6-promise/utils.js","../../node_modules/es6-promise/dist/lib/es6-promise/asap.js","../../node_modules/es6-promise/dist/lib/es6-promise/then.js","../../node_modules/es6-promise/dist/lib/es6-promise/promise/resolve.js","../../node_modules/es6-promise/dist/lib/es6-promise/-internal.js","../../node_modules/es6-promise/dist/lib/es6-promise/enumerator.js","../../node_modules/es6-promise/dist/lib/es6-promise/promise/all.js","../../node_modules/es6-promise/dist/lib/es6-promise/promise/race.js","../../node_modules/es6-promise/dist/lib/es6-promise/promise/reject.js","../../node_modules/es6-promise/dist/lib/es6-promise/promise.js","../../node_modules/es6-promise/dist/lib/es6-promise/polyfill.js","../../node_modules/es6-promise/dist/lib/es6-promise.js","../../node_modules/es6-promise/dist/lib/es6-promise.auto.js","../../src/Errors.ts","../../src/ILogger.ts","../../src/HttpClient.ts","../../src/TextMessageFormat.ts","../../src/HandshakeProtocol.ts","../../src/IHubProtocol.ts","../../src/Loggers.ts","../../src/Utils.ts","../../src/HubConnection.ts","../../src/ITransport.ts","../../src/AbortController.ts","../../src/LongPollingTransport.ts","../../src/ServerSentEventsTransport.ts","../../src/WebSocketTransport.ts","../../src/HttpConnection.ts","../../src/JsonHubProtocol.ts","../../src/HubConnectionBuilder.ts","../../src/index.ts","../../src/browser-index.ts"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","__rest","e","indexOf","getOwnPropertySymbols","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","rejected","result","done","then","apply","__generator","body","_","label","sent","trys","ops","f","y","g","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__exportStar","m","exports","__values","o","__read","ar","error","__spread","concat","__await","__asyncGenerator","asyncIterator","q","a","resume","settle","fulfill","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__importStar","mod","__esModule","k","default","__importDefault","es6Promise_auto","createCommonjsModule","module","objectOrFunction","x","type","isFunction","_isArray","isArray","toString","len","vertxNext","customSchedulerFn","asap","callback","arg","queue","flush","scheduleFlush","setScheduler","scheduleFn","setAsap","asapFn","browserWindow","window","undefined","browserGlobal","BrowserMutationObserver","MutationObserver","WebKitMutationObserver","isNode","self","process","isWorker","Uint8ClampedArray","importScripts","MessageChannel","useNextTick","nextTick","useVertxTimer","useSetTimeout","useMutationObserver","iterations","observer","node","document","createTextNode","observe","characterData","data","useMessageChannel","channel","port1","onmessage","port2","postMessage","globalSetTimeout","setTimeout","attemptVertx","require","vertx","runOnLoop","runOnContext","onFulfillment","onRejection","parent","child","noop","PROMISE_ID","makePromise","_state","invokeCallback","_result","subscribe","object","Constructor","promise","_resolve","Math","random","substring","PENDING","FULFILLED","REJECTED","GET_THEN_ERROR","ErrorObject","selfFulfillment","cannotReturnOwn","getThen","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","sealed","reason","_label","handleOwnThenable","handleMaybeThenable","maybeThenable","originalThen","originalResolve","publishRejection","_onerror","publish","_subscribers","subscribers","settled","detail","TRY_CATCH_ERROR","tryCatch","hasCallback","succeeded","failed","initializePromise","resolver","resolvePromise","rejectPromise","id","nextId","validationError","Error","Enumerator","input","_instanceConstructor","_remaining","_enumerate","_eachEntry","entry","_then","_settledAt","_willSettleAt","state","enumerator","all","entries","race","_reject","needsResolver","needsNew","catch","_catch","finally","_finally","Promise$2","Resolve","Reject","_setScheduler","_setAsap","_asap","polyfill","local","global","Function","promiseToString","cast","HttpError","_super","tslib_1","errorMessage","statusCode","_this","trueProto","_newTarget","TimeoutError","LogLevel","HttpResponse","statusText","content","HttpClient","get","url","options","send","method","post","delete","DefaultHttpClient","logger","request","xhr","XMLHttpRequest","open","withCredentials","setRequestHeader","headers","keys","forEach","header","responseType","abortSignal","onabort","abort","timeout","onload","status","response","responseText","Errors_1","onerror","log","ILogger_1","Warning","ontimeout","TextMessageFormat","write","output","RecordSeparator","parse","messages","split","RecordSeparatorCode","String","fromCharCode","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","TextMessageFormat_1","JSON","stringify","parseHandshakeResponse","responseMessage","messageData","remainingData","ArrayBuffer","binaryData","Uint8Array","separatorIndex","responseLength","slice","byteLength","buffer","textData","MessageType","NullLogger","logLevel","message","instance","Arg","isRequired","val","name","isIn","values","getDataDetail","includeContent","formatArrayBuffer","view","str","num","pad","substr","sendMessage","transportName","httpClient","accessTokenFactory","logMessageContent","token","_b","_a","Trace","createLogger","ConsoleLogger","Information","Loggers_1","Subject","cancelCallback","observers","item","_i","err","complete","SubjectSubscription","subject","dispose","index","splice","minimumLogLevel","Critical","console","warn","info","DEFAULT_TIMEOUT_IN_MS","HubConnection","connection","protocol","Utils_1","serverTimeoutInMilliseconds","handshakeProtocol","HandshakeProtocol_1","onreceive","processIncomingData","onclose","connectionClosed","callbacks","methods","closedCallbacks","start","version","Debug","receivedHandshakeResponse","transferFormat","cleanupTimeout","configureTimeout","stop","stream","methodName","args","invocationDescriptor","createStreamInvocation","cancelInvocation","createCancelInvocation","invocationId","cancelMessage","writeMessage","invocationEvent","IHubProtocol_1","Completion","createInvocation","invoke","completionMessage","on","newMethod","toLowerCase","off","handlers","removeIdx","processHandshakeResponse","parseMessages","messages_1","Invocation","invokeClientMethod","StreamItem","Ping","Close","features","inherentKeepAlive","timeoutHandle","serverTimeout","invocationMessage","clearTimeout","nonblocking","StreamInvocation","CancelInvocation","HttpTransportType","TransferFormat","AbortController","isAborted","SHUTDOWN_TIMEOUT","LongPollingTransport","shutdownTimeout","pollAbort","AbortController_1","aborted","connect","ITransport_1","Binary","pollOptions","signal","updateHeaderToken","pollUrl","Date","now","closeError","running","poll","e_1","stopped","shutdownTimer","deleteOptions","ServerSentEventsTransport","encodeURIComponent","opened","Text","eventSource","EventSource","close","onopen","WebSocketTransport","replace","webSocket","WebSocket","binaryType","event","wasClean","code","readyState","OPEN","MAX_REDIRECTS","HttpConnection","baseUrl","resolveUrl","HttpClient_1","connectionState","startPromise","startInternal","transport","stopError","skipNegotiation","WebSockets","constructTransport","negotiateResponse","redirects","this_1","getNegotiationResponse","accessToken","accessToken_1","createTransport","LongPollingTransport_1","stopConnection","changeState","e_2","negotiateUrl","resolveNegotiateUrl","e_3","createConnectUrl","connectionId","requestedTransport","requestedTransferFormat","connectUrl","isITransport","transports","availableTransports","transports_1","endpoint","resolveTransport","ex_1","WebSocketTransport_1","ServerSentEvents","ServerSentEventsTransport_1","LongPolling","transferFormats","map","transportMatches","from","to","lastIndexOf","aTag","createElement","href","actualTransport","JSON_HUB_PROTOCOL_NAME","JsonHubProtocol","hubMessages","parsedMessage","isInvocationMessage","isStreamItemMessage","isCompletionMessage","assertNotEmptyString","HubConnectionBuilder","configureLogging","logging","isLogger","withUrl","transportTypeOrOptions","httpConnectionOptions","withHubProtocol","build","HttpConnection_1","HubConnection_1","JsonHubProtocol_1","VERSION","Errors","HubConnectionBuilder_1","IHubProtocol","ILogger","ITransport","Loggers","writable","cjs"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nexport function isFunction(x) {\n  return typeof x === 'function';\n}\n\nexport function isMaybeThenable(x) {\n  return x !== null && typeof x === 'object';\n}\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nexport var isArray = _isArray;","var len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nexport var asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nexport function setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nexport function setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}","import { invokeCallback, subscribe, FULFILLED, REJECTED, noop, makePromise, PROMISE_ID } from './-internal';\n\nimport { asap } from './asap';\n\nexport default function then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}","import { noop, resolve as _resolve } from '../-internal';\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nexport default function resolve(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  _resolve(promise, object);\n  return promise;\n}","import { objectOrFunction, isFunction } from './utils';\n\nimport { asap } from './asap';\n\nimport originalThen from './then';\nimport originalResolve from './promise/resolve';\n\nexport var PROMISE_ID = Math.random().toString(36).substring(16);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then) {\n  if (maybeThenable.constructor === promise.constructor && then === originalThen && maybeThenable.constructor.resolve === originalResolve) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n      GET_THEN_ERROR.error = null;\n    } else if (then === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then)) {\n      handleForeignThenable(promise, maybeThenable, then);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = void 0,\n      failed = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (failed) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nexport { nextId, makePromise, getThen, noop, resolve, reject, fulfill, subscribe, publish, publishRejection, initializePromise, invokeCallback, FULFILLED, REJECTED, PENDING, handleMaybeThenable };","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { isArray, isMaybeThenable } from './utils';\n\nimport { noop, reject, fulfill, subscribe, FULFILLED, REJECTED, PENDING, getThen, handleMaybeThenable } from './-internal';\n\nimport then from './then';\nimport Promise from './promise';\nimport originalResolve from './promise/resolve';\nimport originalThen from './then';\nimport { makePromise, PROMISE_ID } from './-internal';\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n};\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve = c.resolve;\n\n\n    if (resolve === originalResolve) {\n      var _then = getThen(entry);\n\n      if (_then === originalThen && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, _then);\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve) {\n          return resolve(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\nexport default Enumerator;","import Enumerator from '../enumerator';\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nexport default function all(entries) {\n  return new Enumerator(this, entries).promise;\n}","import { isArray } from \"../utils\";\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nexport default function race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}","import { noop, reject as _reject } from '../-internal';\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nexport default function reject(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  _reject(promise, reason);\n  return promise;\n}","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { isFunction } from './utils';\n\nimport { noop, nextId, PROMISE_ID, initializePromise } from './-internal';\n\nimport { asap, setAsap, setScheduler } from './asap';\n\nimport all from './promise/all';\nimport race from './promise/race';\nimport Resolve from './promise/resolve';\nimport Reject from './promise/reject';\nimport then from './then';\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    });\n  };\n\n  return Promise;\n}();\n\nPromise.prototype.then = then;\nexport default Promise;\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = Resolve;\nPromise.reject = Reject;\nPromise._setScheduler = setScheduler;\nPromise._setAsap = setAsap;\nPromise._asap = asap;","/*global self*/\nimport Promise from './promise';\n\nexport default function polyfill() {\n    var local = void 0;\n\n    if (typeof global !== 'undefined') {\n        local = global;\n    } else if (typeof self !== 'undefined') {\n        local = self;\n    } else {\n        try {\n            local = Function('return this')();\n        } catch (e) {\n            throw new Error('polyfill failed because global object is unavailable in this environment');\n        }\n    }\n\n    var P = local.Promise;\n\n    if (P) {\n        var promiseToString = null;\n        try {\n            promiseToString = Object.prototype.toString.call(P.resolve());\n        } catch (e) {\n            // silently ignored\n        }\n\n        if (promiseToString === '[object Promise]' && !P.cast) {\n            return;\n        }\n    }\n\n    local.Promise = Promise;\n}","import Promise from './es6-promise/promise';\nimport polyfill from './es6-promise/polyfill';\n\n// Strange compat..\nPromise.polyfill = polyfill;\nPromise.Promise = Promise;\nexport default Promise;","import Promise from './es6-promise';\nPromise.polyfill();\nexport default Promise;","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: { [key: string]: string };\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n}\r\n\r\n/** Default implementation of {@link HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    /** Creates a new instance of the {@link DefaultHttpClient}, using the provided {@link ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = true;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n\r\n            if (request.headers) {\r\n                Object.keys(request.headers)\r\n                    .forEach((header) => xhr.setRequestHeader(header, request.headers[header]));\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Not exported from index\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n}\r\n\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (data instanceof ArrayBuffer) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        responseMessage = JSON.parse(messages[0]);\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link StreamInvocationMessage} and {@link CompletionMessage}. It may\r\n     * be 'undefined' for an {@link InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link error} or {@link result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link error} or {@link result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link transferFormat} is 'Text', the {@link input} parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string, or ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    public log(logLevel: LogLevel, message: string): void {\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\n\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let length: string = null;\r\n    if (data instanceof ArrayBuffer) {\r\n        length = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            length += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        length = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            length += `. Content: '${data}'.`;\r\n        }\r\n    }\r\n    return length;\r\n}\r\n\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: () => string | Promise<string>, content: string | ArrayBuffer, logMessageContent: boolean): Promise<void> {\r\n    let headers;\r\n    const token = await accessTokenFactory();\r\n    if (token) {\r\n        headers = {\r\n            [\"Authorization\"]: `Bearer ${token}`,\r\n        };\r\n    }\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\nexport function createLogger(logger?: ILogger | LogLevel) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    public observers: Array<IStreamSubscriber<T>>;\r\n    public cancelCallback: () => Promise<void>;\r\n\r\n    constructor(cancelCallback: () => Promise<void>) {\r\n        this.observers = [];\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private subject: Subject<T>;\r\n    private observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this.subject = subject;\r\n        this.observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this.subject.observers.indexOf(this.observer);\r\n        if (index > -1) {\r\n            this.subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this.subject.observers.length === 0) {\r\n            this.subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly minimumLogLevel: LogLevel;\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this.minimumLogLevel = minimumLogLevel;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this.minimumLogLevel) {\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    console.error(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    console.warn(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    console.info(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    console.log(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Arg, Subject } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private id: number;\r\n    private closedCallbacks: Array<(error?: Error) => void>;\r\n    private timeoutHandle: NodeJS.Timer;\r\n    private receivedHandshakeResponse: boolean;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol): HubConnection {\r\n        return new HubConnection(connection, logger, protocol);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.id = 0;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public async start(): Promise<void> {\r\n        const handshakeRequest: HandshakeRequestMessage = {\r\n            protocol: this.protocol.name,\r\n            version: this.protocol.version,\r\n        };\r\n\r\n        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        this.receivedHandshakeResponse = false;\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n        await this.connection.send(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n        this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n        // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n        this.cleanupTimeout();\r\n        this.configureTimeout();\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        this.cleanupTimeout();\r\n        return this.connection.stop();\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args);\r\n\r\n        const subject = new Subject<T>(() => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n            const cancelMessage: any = this.protocol.writeMessage(cancelInvocation);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return this.connection.send(cancelMessage);\r\n        });\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n\r\n            if (invocationEvent.type === MessageType.Completion) {\r\n                if (invocationEvent.error) {\r\n                    subject.error(new Error(invocationEvent.error));\r\n                } else {\r\n                    subject.complete();\r\n                }\r\n            } else {\r\n                subject.next((invocationEvent.item) as T);\r\n            }\r\n        };\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        this.connection.send(message)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        return subject;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, true);\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: StreamItemMessage | CompletionMessage, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    const completionMessage = invocationEvent as CompletionMessage;\r\n                    if (completionMessage.error) {\r\n                        reject(new Error(completionMessage.error));\r\n                    } else {\r\n                        resolve(completionMessage.result);\r\n                    }\r\n                } else {\r\n                    reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                }\r\n            };\r\n\r\n            const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n            this.connection.send(message)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    delete this.callbacks[invocationDescriptor.invocationId];\r\n                });\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback != null) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n                        this.connection.stop(message.error ? new Error(\"Server returned an error on close: \" + message.error) : null);\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, \"Invalid message type: \" + message.type);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.configureTimeout();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.connection.stop(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n            this.connection.stop(new Error(message));\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        return remainingData;\r\n    }\r\n\r\n    private configureTimeout() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n                this.connection.stop(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(undefined, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\r\n            });\r\n\r\n        this.cleanupTimeout();\r\n\r\n        this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            const id = this.id;\r\n            this.id++;\r\n\r\n            return {\r\n                arguments: args,\r\n                invocationId: id.toString(),\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[]): StreamInvocationMessage {\r\n        const id = this.id;\r\n        this.id++;\r\n\r\n        return {\r\n            arguments: args,\r\n            invocationId: id.toString(),\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: (data: string | ArrayBuffer) => void;\r\n    onclose: (error?: Error) => void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\nexport class AbortController implements AbortSignal {\r\n    private isAborted: boolean = false;\r\n    public onabort: () => void;\r\n\r\n    public abort() {\r\n        if (!this.isAborted) {\r\n            this.isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this.isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: () => void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\nconst SHUTDOWN_TIMEOUT = 5 * 1000;\r\n\r\n// Not exported from 'index', this type is internal.\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n\r\n    private url: string;\r\n    private pollXhr: XMLHttpRequest;\r\n    private pollAbort: AbortController;\r\n    private shutdownTimer: any; // We use 'any' because this is an object in NodeJS. But it still gets passed to clearTimeout, so it doesn't really matter\r\n    private shutdownTimeout: number;\r\n    private running: boolean;\r\n    private stopped: boolean;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this.pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean, shutdownTimeout?: number) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n        this.shutdownTimeout = shutdownTimeout || SHUTDOWN_TIMEOUT;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting\");\r\n\r\n        if (transferFormat === TransferFormat.Binary && (typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: {},\r\n            timeout: 90000,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this.accessTokenFactory();\r\n        this.updateHeaderToken(pollOptions, token);\r\n\r\n        let closeError: Error;\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n        const response = await this.httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            closeError = new HttpError(response.statusText, response.statusCode);\r\n            this.running = false;\r\n        } else {\r\n            this.running = true;\r\n        }\r\n\r\n        this.poll(this.url, pollOptions, closeError);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private updateHeaderToken(request: HttpRequest, token: string) {\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async poll(url: string, pollOptions: HttpRequest, closeError: Error): Promise<void> {\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.accessTokenFactory();\r\n                this.updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n                        // Unexpected status code\r\n                        closeError = new HttpError(response.statusText, response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after we were stopped by DELETE\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            // Indicate that we've stopped so the shutdown timer doesn't get registered.\r\n            this.stopped = true;\r\n\r\n            // Clean up the shutdown timer if it was registered\r\n            if (this.shutdownTimer) {\r\n                clearTimeout(this.shutdownTimer);\r\n            }\r\n\r\n            // Fire our onclosed event\r\n            if (this.onclose) {\r\n                this.logger.log(LogLevel.Trace, `(LongPolling transport) Firing onclose event. Error: ${closeError || \"<undefined>\"}`);\r\n                this.onclose(closeError);\r\n            }\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Transport finished.\");\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        // Send a DELETE request to stop the poll\r\n        try {\r\n            this.running = false;\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: {},\r\n            };\r\n            const token = await this.accessTokenFactory();\r\n            this.updateHeaderToken(deleteOptions, token);\r\n            const response = await this.httpClient.delete(this.url, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n        } finally {\r\n            // Abort the poll after the shutdown timeout if the server doesn't stop the poll.\r\n            if (!this.stopped) {\r\n                this.shutdownTimer = setTimeout(() => {\r\n                    this.logger.log(LogLevel.Warning, \"(LongPolling transport) server did not terminate after DELETE request, canceling poll.\");\r\n\r\n                    // Abort any outstanding poll\r\n                    this.pollAbort.abort();\r\n                }, this.shutdownTimeout);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onreceive: (data: string | ArrayBuffer) => void;\r\n    public onclose: (error?: Error) => void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private eventSource: EventSource;\r\n    private url: string;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        if (typeof (EventSource) === \"undefined\") {\r\n            throw new Error(\"'EventSource' is not supported in your environment.\");\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting\");\r\n\r\n        const token = await this.accessTokenFactory();\r\n        if (token) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n        }\r\n\r\n        this.url = url;\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n            }\r\n\r\n            const eventSource = new EventSource(url, { withCredentials: true });\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            if (this.onclose) {\r\n                                this.onclose(error);\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: any) => {\r\n                    const error = new Error(e.message || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                return Promise.reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = null;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onreceive: (data: string | ArrayBuffer) => void;\r\n    public onclose: (error?: Error) => void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail } from \"./Utils\";\r\n\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logMessageContent: boolean;\r\n    private webSocket: WebSocket;\r\n\r\n    constructor(accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logMessageContent = logMessageContent;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        if (typeof (WebSocket) === \"undefined\") {\r\n            throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting\");\r\n\r\n        const token = await this.accessTokenFactory();\r\n        if (token) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            const webSocket = new WebSocket(url);\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}`);\r\n                this.webSocket = webSocket;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: ErrorEvent) => {\r\n                reject(event.error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // webSocket will be null if the transport did not start successfully\r\n                this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n                if (this.onclose) {\r\n                    if (event.wasClean === false || event.code !== 1000) {\r\n                        this.onclose(new Error(`Websocket closed with status code: ${event.code} (${event.reason})`));\r\n                    } else {\r\n                        this.onclose();\r\n                    }\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            this.webSocket.close();\r\n            this.webSocket = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onreceive: (data: string | ArrayBuffer) => void;\r\n    public onclose: (error?: Error) => void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultHttpClient, HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\nconst enum ConnectionState {\r\n    Connecting,\r\n    Connected,\r\n    Disconnected,\r\n}\r\n\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n}\r\n\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: Array<keyof typeof TransferFormat>;\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    private baseUrl: string;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport: ITransport;\r\n    private startPromise: Promise<void>;\r\n    private stopError?: Error;\r\n    private accessTokenFactory?: () => string | Promise<string>;\r\n\r\n    public readonly features: any = {};\r\n    public onreceive: (data: string | ArrayBuffer) => void;\r\n    public onclose: (e?: Error) => void;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.logger = createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.accessTokenFactory = options.accessTokenFactory || (() => null);\r\n        options.logMessageContent = options.logMessageContent || false;\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.options = options;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a connection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startPromise = this.startInternal(transferFormat);\r\n        return this.startPromise;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            throw new Error(\"Cannot send data if the connection is not in the 'Connected' State.\");\r\n        }\r\n\r\n        return this.transport.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        try {\r\n            await this.startPromise;\r\n        } catch (e) {\r\n            // this exception is returned to the user as a rejected Promise from the start method\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        if (this.transport) {\r\n            this.stopError = error;\r\n            await this.transport.stop();\r\n            this.transport = null;\r\n        }\r\n    }\r\n\r\n    private async startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this.accessTokenFactory = this.options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this.options.skipNegotiation) {\r\n                if (this.options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this.constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this.transport.connect(url, transferFormat);\r\n                } else {\r\n                    throw Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this.connectionState === ConnectionState.Disconnected) {\r\n                        return;\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this.accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this.createTransport(url, this.options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            this.transport.onreceive = this.onreceive;\r\n            this.transport.onclose = (e) => this.stopConnection(e);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = null;\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private async getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const token = await this.accessTokenFactory();\r\n        let headers;\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n\r\n        const negotiateUrl = this.resolveNegotiateUrl(url);\r\n        this.logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}`);\r\n        try {\r\n            const response = await this.httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                throw Error(`Unexpected status code returned from negotiate ${response.statusCode}`);\r\n            }\r\n\r\n            return JSON.parse(response.content as string) as INegotiateResponse;\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private createConnectUrl(url: string, connectionId: string) {\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionId}`;\r\n    }\r\n\r\n    private async createTransport(url: string, requestedTransport: HttpTransportType | ITransport, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this.createConnectUrl(url, negotiateResponse.connectionId);\r\n        if (this.isITransport(requestedTransport)) {\r\n            this.logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this.transport.connect(connectUrl, requestedTransferFormat);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n            return;\r\n        }\r\n\r\n        const transports = negotiateResponse.availableTransports;\r\n        for (const endpoint of transports) {\r\n            this.connectionState = ConnectionState.Connecting;\r\n            const transport = this.resolveTransport(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (typeof transport === \"number\") {\r\n                this.transport = this.constructTransport(transport);\r\n                if (negotiateResponse.connectionId === null) {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    connectUrl = this.createConnectUrl(url, negotiateResponse.connectionId);\r\n                }\r\n                try {\r\n                    await this.transport.connect(connectUrl, requestedTransferFormat);\r\n                    this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n                    return;\r\n                } catch (ex) {\r\n                    this.logger.log(LogLevel.Error, `Failed to start the transport '${HttpTransportType[transport]}': ${ex}`);\r\n                    this.connectionState = ConnectionState.Disconnected;\r\n                    negotiateResponse.connectionId = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error(\"Unable to initialize any of the available transports.\");\r\n    }\r\n\r\n    private constructTransport(transport: HttpTransportType) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                return new WebSocketTransport(this.accessTokenFactory, this.logger, this.options.logMessageContent);\r\n            case HttpTransportType.ServerSentEvents:\r\n                return new ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private resolveTransport(endpoint: IAvailableTransport, requestedTransport: HttpTransportType, requestedTransferFormat: TransferFormat): HttpTransportType | null {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this.logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && typeof WebSocket === \"undefined\") ||\r\n                        (transport === HttpTransportType.ServerSentEvents && typeof EventSource === \"undefined\")) {\r\n                        this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                    } else {\r\n                        this.logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'`);\r\n                        return transport;\r\n                    }\r\n                } else {\r\n                    this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                }\r\n            } else {\r\n                this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private changeState(from: ConnectionState, to: ConnectionState): boolean {\r\n        if (this.connectionState === from) {\r\n            this.connectionState = to;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private async stopConnection(error?: Error): Promise<void> {\r\n        this.transport = null;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this.stopError || error;\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this.onclose) {\r\n            this.onclose(error);\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (typeof window === \"undefined\" || !window || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative  path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this.isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this.isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this.isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private isInvocationMessage(message: InvocationMessage): void {\r\n        this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private isStreamItemMessage(message: StreamItemMessage): void {\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n/** A builder for configuring {@link HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url: string;\r\n    /** @internal */\r\n    public logger: ILogger;\r\n\r\n    /** Configures console logging for the {@link HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = transportTypeOrOptions;\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol());\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n\r\n// Everything that users need to access must be exported here. Including interfaces.\r\nexport { AbortSignal } from \"./AbortController\";\r\nexport { HttpError, TimeoutError } from \"./Errors\";\r\nexport { DefaultHttpClient, HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nexport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nexport { HubConnection } from \"./HubConnection\";\r\nexport { HubConnectionBuilder } from \"./HubConnectionBuilder\";\r\nexport { MessageType, MessageHeaders, HubMessage, HubMessageBase, HubInvocationMessage, InvocationMessage, StreamInvocationMessage, StreamItemMessage, CompletionMessage, PingMessage, CloseMessage, CancelInvocationMessage, IHubProtocol } from \"./IHubProtocol\";\r\nexport { ILogger, LogLevel } from \"./ILogger\";\r\nexport { HttpTransportType, TransferFormat, ITransport } from \"./ITransport\";\r\nexport { IStreamSubscriber, IStreamResult, ISubscription } from \"./Stream\";\r\nexport { NullLogger } from \"./Loggers\";\r\nexport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This is where we add any polyfills we'll need for the browser. It is the entry module for browser-specific builds.\r\n\r\nimport \"es6-promise/dist/es6-promise.auto.js\";\r\n\r\n// Copy from Array.prototype into Uint8Array to polyfill on IE. It's OK because the implementations of indexOf and slice use properties\r\n// that exist on Uint8Array with the same name, and JavaScript is magic.\r\n// We make them 'writable' because the Buffer polyfill messes with it as well.\r\nif (!Uint8Array.prototype.indexOf) {\r\n    Object.defineProperty(Uint8Array.prototype, \"indexOf\", {\r\n        value: Array.prototype.indexOf,\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.slice) {\r\n    Object.defineProperty(Uint8Array.prototype, \"slice\", {\r\n        value: Array.prototype.slice,\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.forEach) {\r\n    Object.defineProperty(Uint8Array.prototype, \"forEach\", {\r\n        value: Array.prototype.forEach,\r\n        writable: true,\r\n    });\r\n}\r\n\r\nexport * from \"./index\";\r\n"]}